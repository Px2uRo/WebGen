using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Xml.Linq;

namespace MySourceGen
{
    [Generator]
    public class HandleControllerAtrribute : ISourceGenerator
    {
        Microsoft.CodeAnalysis.Compilation comp;
        public void Execute(GeneratorExecutionContext context)
        {
            comp= context.Compilation;
            var controllers = ControllerCollector.CollectControllers(context);
            var source = $$"""
            /*<autogenerated>
            该代码于{{DateTime.Now.ToString("R")}}用 MyCodeGen 生成
            找到了个{{controllers.Count}}控制器标签
            不要更改这里的代码，更改之后的代码不会被保存。
            </autogenerated>*/

            using System.Text;
            using System;
            using Microsoft.AspNetCore.Builder;

            namespace MSCM
            {
                public static class ProgramTool
                {
                    public static void ReMap(this Microsoft.AspNetCore.Builder.WebApplication app)
                    {
                        {{GenMinimalMapping(controllers)}}
                    }
                }
            }
            """;


            context.AddSource("Hello.g.cs", SourceText.From(source, Encoding.UTF8));
        }

        private string GenMinimalMapping(Dictionary<ClassDeclarationSyntax, SyntaxTree> controllers)
        {
            var sb = new StringBuilder();

            foreach (var kvp in controllers)
            {
                var controller = kvp.Key;
                var tree = kvp.Value;
                var model = comp.GetSemanticModel(tree);
                var controllerName = controller.Identifier.Text.Replace("Controller", "");
                var classSymbol = model.GetDeclaredSymbol(controller) as INamedTypeSymbol;

                // 解析 Controller 的 [Route]，默认为 controllerName
                string baseRoute = controller.AttributeLists
                    .SelectMany(al => al.Attributes)
                    .Where(attr =>
                    {
                        var sym = model.GetSymbolInfo(attr).Symbol as IMethodSymbol;
                        return sym?.ContainingType.ToDisplayString() == "Microsoft.AspNetCore.Mvc.RouteAttribute";
                    })
                    .Select(attr =>
                    {
                        var argExpr = attr.ArgumentList?.Arguments.FirstOrDefault()?.Expression;
                        var constVal = argExpr != null ? model.GetConstantValue(argExpr) : default;
                        if (constVal.HasValue && constVal.Value is string route)
                            return route;
                        return null;
                    })
                    .FirstOrDefault() ?? controllerName;

                // 处理特殊根路由 "/" 或空字符串的情况，保持为空字符串，方便拼接
                baseRoute = baseRoute.Trim('/');
                if (baseRoute == "/") baseRoute = "";

                foreach (var method in controller.Members.OfType<MethodDeclarationSyntax>())
                {
                    if (!method.Modifiers.Any(m => m.Text == "public")) continue;

                    var methodName = method.Identifier.Text;
                    bool isHttpGet = false;
                    string methodRoute = null;

                    // 解析方法上的 HttpGetAttribute
                    foreach (var attr in method.AttributeLists.SelectMany(a => a.Attributes))
                    {
                        var attrSym = model.GetSymbolInfo(attr).Symbol as IMethodSymbol;
                        var fullAttrName = attrSym?.ContainingType.ToDisplayString();

                        if (fullAttrName == "Microsoft.AspNetCore.Mvc.HttpGetAttribute")
                        {
                            isHttpGet = true;

                            if (attr.ArgumentList?.Arguments.Count > 0)
                            {
                                var constVal = model.GetConstantValue(attr.ArgumentList.Arguments[0].Expression);
                                if (constVal.HasValue && constVal.Value is string s)
                                    methodRoute = s;
                            }
                            break;
                        }
                    }
                    if (!isHttpGet) continue;

                    // 如果方法路由为空，用参数名自动生成路径，如 "{id}/{name}"
                    if (string.IsNullOrEmpty(methodRoute))
                    {
                        var parameters = method.ParameterList.Parameters;
                        if (parameters.Count > 0)
                        {
                            methodRoute = string.Join("/", parameters.Select(p => $"{{{p.Identifier.Text}}}"));
                        }
                        else
                        {
                            methodRoute = methodName;
                        }
                    }

                    // 拼接完整路由路径
                    var routeParts = new List<string>();
                    if (!string.IsNullOrEmpty(baseRoute)) routeParts.Add(baseRoute);
                    if (!string.IsNullOrEmpty(methodRoute)) routeParts.Add(methodRoute);
                    var finalRoute = "/" + string.Join("/", routeParts).Trim('/');

                    // 生成 Minimal API Lambda 的参数列表和调用参数列表
                    var lambdaParameters = method.ParameterList.Parameters.Select(p =>
                    {
                        var typeInfo = model.GetTypeInfo(p.Type);
                        var typeName = typeInfo.Type?.ToDisplayString() ?? p.Type.ToString();
                        return $"{typeName} {p.Identifier.Text}";
                    });
                    var lambdaParamsStr = string.Join(", ", lambdaParameters);
                    var methodArgsStr = string.Join(", ", method.ParameterList.Parameters.Select(p => p.Identifier.Text));

                    sb.AppendLine($$"""
app.MapGet("{{finalRoute}}", ({{lambdaParamsStr}}) => new {{classSymbol.ToDisplayString()}}().{{methodName}}({{methodArgsStr}}));
""");
                }
            }

            return sb.ToString();
        }

        public void Initialize(GeneratorInitializationContext context)
        {

        }
    }
}
